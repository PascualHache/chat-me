{"version":3,"sources":["generateFakeData.js","components/Avatar.js","components/ContactBox.js","components/Message.js","components/MessagesBox.js","components/ChatInputBox.js","components/Search.js","App.js","serviceWorker.js","index.js","assets/carles.jpg","assets/tag_faces.svg","assets/mic.svg","assets/send.svg","assets/done_all.svg"],"names":["faker","require","User","this","id","random","uuid","name","avatar","internet","Message","isMainUser","msg","date","lorem","words","helpers","randomize","Array","keys","recent","mainUser","contactsMessages","map","contact","messages","_","i","filter","m","Avatar","user","showName","className","src","carles","alt","ContactBox","text","length","setContactSelected","maxTs","Math","max","getTime","lastMsg","find","onClick","toLocaleDateString","doubleCheck","substring","message","toLocaleString","MessagesBox","endDiv","useRef","useEffect","current","scrollIntoView","sort","a","b","key","style","float","clear","ref","ChatInputBox","setMessage","pushMessage","emojiIcon","type","placeholder","value","onChange","e","target","onKeyDown","sendIcon","micIcon","Search","search","handleSearch","App","useState","data","setData","contactSelected","currentMessages","setCurrentMessages","setSearch","filteredContacts","setFilterContacts","filterContacts","result","toLowerCase","includes","currContact","d","input","index","findIndex","newData","Object","assign","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.b0dd51a2.chunk.js","sourcesContent":["const faker = require('faker')\n\nclass User {\n    constructor() {\n        this.id = faker.random.uuid()\n        this.name = \"Carles Martínez\"\n        this.avatar = faker.internet.avatar()\n    }\n}\n// class User {\n//     constructor() {\n//         this.id = faker.random.uuid()\n//         this.name = faker.name.findName()\n//         this.avatar = faker.internet.avatar()\n//     }\n// }\nexport class Message {\n    constructor(isMainUser, msg, date) {\n        this.id = faker.random.uuid()\n        this.msg = msg || faker.lorem.words(faker.helpers.randomize([...Array(20).keys()]))\n        this.isMainUser = isMainUser\n        this.date = date || faker.date.recent()\n    }\n}\n\nexport const mainUser = new User()\n\nexport const contacts = [...Array(1).keys()].map(() => new User())\n// export const contacts = [...Array(15).keys()].map(() => new User())\n\nexport const contactsMessages = contacts.map((contact) => {\n    return {\n        contact,\n        messages: [...Array(50).keys()]\n            .map((_, i) => {\n                return (i + 1) % 2 === 0 ? new Message(true) : new Message(false)\n            })\n            .filter((m) => m.msg),\n    }\n})\n","import React from 'react';\r\nimport carles from '../assets/carles.jpg'\r\n\r\n\r\nexport default function Avatar({ user, showName }) {\r\n    return (\r\n        <div className=\"avatar-component\">\r\n            <img\r\n                className=\"avatar\"\r\n                src={carles}\r\n                // src={user.avatar}\r\n                alt=\"\"\r\n            />\r\n            {/* { showName && <h3 className=\"avatar-title\">{user.name}</h3>}*/}    \r\n            { showName && <h3 className=\"avatar-title\">Carles Martínez</h3>}   \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport doubleCheck from '../assets/done_all.svg';\r\nimport Avatar from './Avatar';\r\n\r\nexport default function ContactBox( {contact, setContactSelected, messages} ) {\r\n    const maxTs = Math.max(...messages.map((m)=>m.date.getTime()))\r\n    const lastMsg = messages.find((m)=> m.date.getTime() === maxTs)\r\n    function truncate(text, length){\r\n        return text.length > length ? `${text.substring(0, length)} ...`: text\r\n    }\r\n    return (\r\n        <div className=\"contact-box\" onClick={() => setContactSelected(contact)}>\r\n            <Avatar user={contact}/>\r\n\r\n            <div className=\"right-section\">\r\n                <div className=\"contact-box-header\">\r\n                    <h3 className=\"avatar-title\">{contact.name}</h3>\r\n                    <span className=\"time-mark\">{lastMsg.date.toLocaleDateString()}</span>\r\n                </div>\r\n                <div className=\"last-msg\">\r\n                    <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\r\n                    <span className=\"text\">{truncate(lastMsg.msg, 30)}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport doubleCheck from '../assets/done_all.svg'\r\n\r\nexport default function Message({ message }) {\r\n    return (\r\n        <div className={`message ${message.isMainUser ? 'sent' : 'received'}`}>\r\n            {message.msg}\r\n            <div className=\"metadata\">\r\n            <span className=\"date\">{message.date.toLocaleString()}</span>\r\n                {message.isMainUser && <img src={doubleCheck} alt=\"\" className=\"icon-small\" />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport Message from './Message';\r\n\r\nexport default function MessagesBox({ messages }) {\r\n    const endDiv = useRef(null)\r\n    useEffect(() => {\r\n        endDiv.current.scrollIntoView()\r\n    })\r\n\r\n    return (\r\n        <div className=\"chats\">\r\n            {messages.sort((a,b) => a.date.getTime() - b.date.getTime())\r\n            .map((m) => (\r\n                <Message message={m} key={m.id} />\r\n            ))}\r\n            <div style={{float:'right', clear:'both'}} ref={endDiv}></div>\r\n            {/* <div className=\"message received\">\r\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Consequatur voluptatibus fuga illo.\r\n            <div className=\"metadata\">\r\n                <span className=\"date\">05/20/2020</span>\r\n            </div> \r\n        </div>*/}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport emojiIcon from '../assets/tag_faces.svg'\r\nimport micIcon from '../assets/mic.svg'\r\nimport sendIcon from '../assets/send.svg'\r\n\r\nexport default function ChatInputBox({ message, setMessage, pushMessage }) {\r\n    function handleKeyDown(e) {\r\n        if (e.key === 'Enter' && message) {\r\n            pushMessage()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"chat-input-box\">\r\n            <div className=\"icon emoji-selector\">\r\n                <img src={emojiIcon} alt=\"\" />\r\n            </div>\r\n            <div className=\"chat-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown} />\r\n            </div>\r\n            <div className=\"icon send\" onClick={pushMessage}>\r\n                <img src={message ? sendIcon : micIcon} alt=\"\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Search({search, handleSearch}) {\r\n    return (\r\n        <div className=\"search\">\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Search or start a new chat\" \r\n            value= {search}\r\n            onChange={(e)=> handleSearch(e.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { mainUser, contactsMessages, Message } from './generateFakeData'\nimport Avatar from './components/Avatar'\nimport ContactBox from './components/ContactBox'\nimport MessagesBox from './components/MessagesBox'\nimport ChatInputBox from './components/ChatInputBox'\nimport './App.css'\nimport Search from './components/Search'\n// import Welcome from './components/Welcome'\n\nfunction App() {\n    const [data, setData] = useState(contactsMessages)\n    const [contactSelected, setContactSelected] = useState({})\n    const [currentMessages, setCurrentMessages] = useState([])\n    const [message, setMessage] = useState('')\n    const [search, setSearch] = useState('')\n    const [filteredContacts, setFilterContacts] = useState([])\n\n    useEffect(() => {\n        const currContact = data.find(d => d.contact.id === contactSelected.id)\n        // const currContact = data.find(d => d.contact.name === \"Carles Martínez\")\n        setCurrentMessages(currContact && currContact.messages || [])\n        filterContacts(data, search)\n    }, [contactSelected, data, search])\n\n    function pushMessage(){\n        const index=data.findIndex((d) => d.contact.id === contactSelected.id)\n        // const index=data.findIndex((d) => d.contact.id === contactSelected.id)\n        const newData = Object.assign([], data, {\n            [index]:{\n                contact: contactSelected,\n                messages: [...data[index].messages, new Message(true, message, new Date())],\n            },\n        })\n        setData(newData)\n        setMessage('')\n    }\n\n    function handleSearch(input){\n        setSearch(input)\n        filterContacts(data, input)\n    }\n\n    function filterContacts(data, search){\n        const result = data.filter(({contact}) => {\n            return !search || contact.name.toLowerCase().includes(search.toLowerCase())\n        })\n        setFilterContacts(result)\n    }\n\n    return (\n        <div className=\"app\">\n            <aside>\n                <header>\n                    {/* <div className=\"avatar-component\">\n                        <img\n                            className=\"avatar\"\n                            src=\"https://pbs.twimg.com/profile_images/501759258665299968/3799Ffxy.jpeg\"\n                            alt=\"\"\n                        />\n                    </div> */}\n                    <Avatar user={mainUser} showName={true} />\n                </header>\n                <Search \n                search={search} \n                handleSearch={handleSearch}/>\n                <div className=\"contact-boxes\">\n                    {filteredContacts.map(({ contact, messages }) => (\n                        <ContactBox \n                        contact={contact} \n                        key={contact.id} \n                        setContactSelected={setContactSelected}\n                        messages={messages} />\n                    ))}\n                    {/* <div className=\"contact-box\">\n                        <div className=\"avatar-component\">\n                            <img\n                                className=\"avatar\"\n                                src=\"https://pbs.twimg.com/profile_images/501759258665299968/3799Ffxy.jpeg\"\n                                alt=\"\"\n                            />\n                        </div>\n\n                        <div className=\"right-section\">\n                            <div className=\"contact-box-header\">\n                                <h3 className=\"avatar-title\">Jessica Instituto</h3>\n                                <span className=\"time-mark\">yesterday</span>\n                            </div>\n                            <div className=\"last-msg\">\n                                <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\n                                <span className=\"text\">Lorem ipsum dolor</span>\n                            </div>\n                        </div>\n                    </div> */}\n                </div>\n            </aside>\n            {/* {contactSelected.id ? (\n                <main>\n                <header>\n                    <Avatar user={contactSelected} showName />\n                </header>\n                <MessagesBox messages={currentMessages} />\n                <ChatInputBox message={message} setMessage={setMessage} pushMessage={pushMessage}/>\n            </main>\n            ): <Welcome/>} */}\n            <main>\n                <header>\n                    <Avatar user={contactSelected} showName />\n                    {/* <div className=\"avatar-component\">\n                        <img\n                            className=\"avatar\"\n                            src={carles}\n                            alt=\"\"\n                        />\n\n                        <h3 className=\"avatar-title\">Carles Martínez</h3>\n                    </div> */}\n                </header>\n                <MessagesBox messages={currentMessages} />\n                <ChatInputBox message={message} setMessage={setMessage} pushMessage={pushMessage}/>\n            </main>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/carles.92b043a0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tag_faces.c50cc449.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic.958bf042.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.282ecb9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/done_all.211c1153.svg\";"],"sourceRoot":""}