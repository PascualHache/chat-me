{"version":3,"sources":["assets/done_all.svg","assets/tag_faces.svg","assets/mic.svg","assets/carles.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","alt","type","placeholder","doubleCheck","carles","emojiIcon","micIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,kBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+NCgG5BC,MApFf,WACI,OACI,yBAAKC,UAAU,OACX,+BACI,gCACI,yBAAKA,UAAU,oBACX,yBACIA,UAAU,SACVC,IAAI,wEACJC,IAAI,OAIhB,yBAAKF,UAAU,UACX,2BAAOG,KAAK,OAAOC,YAAY,gCAEnC,yBAAKJ,UAAU,iBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,oBACX,yBACIA,UAAU,SACVC,IAAI,wEACJC,IAAI,MAIZ,yBAAKF,UAAU,iBACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,gBAAd,qBACA,0BAAMA,UAAU,aAAhB,cAEJ,yBAAKA,UAAU,YACX,yBAAKC,IAAKI,IAAaH,IAAI,GAAGF,UAAU,eACxC,0BAAMA,UAAU,QAAhB,0BAMpB,8BACI,gCACI,yBAAKA,UAAU,oBACX,yBACIA,UAAU,SACVC,IAAKK,IACLJ,IAAI,KAGR,wBAAIF,UAAU,gBAAd,wBAGR,yBAAKA,UAAU,SACX,yBAAKA,UAAU,oBAAf,gGAEI,yBAAKA,UAAU,YACX,0BAAMA,UAAU,QAAhB,gBAGR,yBAAKA,UAAU,gBAAf,uDAEI,yBAAKA,UAAU,YACX,0BAAMA,UAAU,QAAhB,cACA,yBAAKC,IAAKI,IAAaH,IAAI,GAAGF,UAAU,kBAIpD,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBACX,yBAAKC,IAAKM,IAAWL,IAAI,MAG7B,yBAAKF,UAAU,cACX,2BAAOG,KAAK,OAAOC,YAAY,oBAGnC,yBAAKJ,UAAU,aACX,yBAAKC,IAAKO,IAASN,IAAI,UC5E3BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96eed747.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/done_all.211c1153.svg\";","module.exports = __webpack_public_path__ + \"static/media/tag_faces.c50cc449.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic.958bf042.svg\";","module.exports = __webpack_public_path__ + \"static/media/carles.92b043a0.jpg\";","import React from 'react'\n\nimport emojiIcon from './assets/tag_faces.svg'\n\nimport doubleCheck from './assets/done_all.svg'\n\nimport micIcon from './assets/mic.svg'\n\nimport carles from './assets/carles.jpg';\n\nimport './App.css'\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <aside>\n                <header>\n                    <div className=\"avatar-component\">\n                        <img\n                            className=\"avatar\"\n                            src=\"https://pbs.twimg.com/profile_images/501759258665299968/3799Ffxy.jpeg\"\n                            alt=\"\"\n                        />\n                    </div>\n                </header>\n                <div className=\"search\">\n                    <input type=\"text\" placeholder=\"Search or start a new chat\" />\n                </div>\n                <div className=\"contact-boxes\">\n                    <div className=\"contact-box\">\n                        <div className=\"avatar-component\">\n                            <img\n                                className=\"avatar\"\n                                src=\"https://pbs.twimg.com/profile_images/501759258665299968/3799Ffxy.jpeg\"\n                                alt=\"\"\n                            />\n                        </div>\n\n                        <div className=\"right-section\">\n                            <div className=\"contact-box-header\">\n                                <h3 className=\"avatar-title\">Jessica Instituto</h3>\n                                <span className=\"time-mark\">yesterday</span>\n                            </div>\n                            <div className=\"last-msg\">\n                                <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\n                                <span className=\"text\">Lorem ipsum dolor</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </aside>\n            <main>\n                <header>\n                    <div className=\"avatar-component\">\n                        <img\n                            className=\"avatar\"\n                            src={carles}\n                            alt=\"\"\n                        />\n\n                        <h3 className=\"avatar-title\">Carles Mart√≠nez</h3>\n                    </div>\n                </header>\n                <div className=\"chats\">\n                    <div className=\"message received\">\n                        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Consequatur voluptatibus fuga illo.\n                        <div className=\"metadata\">\n                            <span className=\"date\">05/20/2020</span>\n                        </div>\n                    </div>\n                    <div className=\"message sent\">\n                        Lorem ipsum dolor, sit amet consectetur adipisicing.\n                        <div className=\"metadata\">\n                            <span className=\"date\">05/20/2020</span>\n                            <img src={doubleCheck} alt=\"\" className=\"icon-small\" />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"chat-input-box\">\n                    <div className=\"icon emoji-selector\">\n                        <img src={emojiIcon} alt=\"\" />\n                    </div>\n\n                    <div className=\"chat-input\">\n                        <input type=\"text\" placeholder=\"Type a message\" />\n                    </div>\n\n                    <div className=\"icon send\">\n                        <img src={micIcon} alt=\"\" />\n                    </div>\n                </div>\n            </main>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}